package transmittalExternal.model;

import java.sql.Date;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 03 10:39:19 ICT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PheDswfParticipantImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(PheDswfParticipantImpl obj) {
                return obj.getId();
            }

            public void put(PheDswfParticipantImpl obj, Object value) {
                obj.setId((Number)value);
            }
        },
        TransmittalId {
            public Object get(PheDswfParticipantImpl obj) {
                return obj.getTransmittalId();
            }

            public void put(PheDswfParticipantImpl obj, Object value) {
                obj.setTransmittalId((String)value);
            }
        },
        Sender {
            public Object get(PheDswfParticipantImpl obj) {
                return obj.getSender();
            }

            public void put(PheDswfParticipantImpl obj, Object value) {
                obj.setSender((String)value);
            }
        },
        Receiver {
            public Object get(PheDswfParticipantImpl obj) {
                return obj.getReceiver();
            }

            public void put(PheDswfParticipantImpl obj, Object value) {
                obj.setReceiver((String)value);
            }
        },
        Role {
            public Object get(PheDswfParticipantImpl obj) {
                return obj.getRole();
            }

            public void put(PheDswfParticipantImpl obj, Object value) {
                obj.setRole((String)value);
            }
        },
        Startdate {
            public Object get(PheDswfParticipantImpl obj) {
                return obj.getStartdate();
            }

            public void put(PheDswfParticipantImpl obj, Object value) {
                obj.setStartdate((Date)value);
            }
        },
        Enddate {
            public Object get(PheDswfParticipantImpl obj) {
                return obj.getEnddate();
            }

            public void put(PheDswfParticipantImpl obj, Object value) {
                obj.setEnddate((Date)value);
            }
        },
        DelegateStatus {
            public Object get(PheDswfParticipantImpl obj) {
                return obj.getDelegateStatus();
            }

            public void put(PheDswfParticipantImpl obj, Object value) {
                obj.setDelegateStatus((String)value);
            }
        },
        Status {
            public Object get(PheDswfParticipantImpl obj) {
                return obj.getStatus();
            }

            public void put(PheDswfParticipantImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(PheDswfParticipantImpl object);

        public abstract void put(PheDswfParticipantImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int ID = AttributesEnum.Id.index();
    public static final int TRANSMITTALID =
        AttributesEnum.TransmittalId.index();
    public static final int SENDER = AttributesEnum.Sender.index();
    public static final int RECEIVER = AttributesEnum.Receiver.index();
    public static final int ROLE = AttributesEnum.Role.index();
    public static final int STARTDATE = AttributesEnum.Startdate.index();
    public static final int ENDDATE = AttributesEnum.Enddate.index();
    public static final int DELEGATESTATUS =
        AttributesEnum.DelegateStatus.index();
    public static final int STATUS = AttributesEnum.Status.index();

    /**
     * This is the default constructor (do not remove).
     */
    public PheDswfParticipantImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("transmittalExternal.model.PheDswfParticipant");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for TransmittalId, using the alias name TransmittalId.
     * @return the TransmittalId
     */
    public String getTransmittalId() {
        return (String)getAttributeInternal(TRANSMITTALID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TransmittalId.
     * @param value value to set the TransmittalId
     */
    public void setTransmittalId(String value) {
        setAttributeInternal(TRANSMITTALID, value);
    }

    /**
     * Gets the attribute value for Sender, using the alias name Sender.
     * @return the Sender
     */
    public String getSender() {
        return (String)getAttributeInternal(SENDER);
    }

    /**
     * Sets <code>value</code> as the attribute value for Sender.
     * @param value value to set the Sender
     */
    public void setSender(String value) {
        setAttributeInternal(SENDER, value);
    }

    /**
     * Gets the attribute value for Receiver, using the alias name Receiver.
     * @return the Receiver
     */
    public String getReceiver() {
        return (String)getAttributeInternal(RECEIVER);
    }

    /**
     * Sets <code>value</code> as the attribute value for Receiver.
     * @param value value to set the Receiver
     */
    public void setReceiver(String value) {
        setAttributeInternal(RECEIVER, value);
    }

    /**
     * Gets the attribute value for Role, using the alias name Role.
     * @return the Role
     */
    public String getRole() {
        return (String)getAttributeInternal(ROLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Role.
     * @param value value to set the Role
     */
    public void setRole(String value) {
        setAttributeInternal(ROLE, value);
    }

    /**
     * Gets the attribute value for Startdate, using the alias name Startdate.
     * @return the Startdate
     */
    public Date getStartdate() {
        return (Date)getAttributeInternal(STARTDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Startdate.
     * @param value value to set the Startdate
     */
    public void setStartdate(Date value) {
        setAttributeInternal(STARTDATE, value);
    }

    /**
     * Gets the attribute value for Enddate, using the alias name Enddate.
     * @return the Enddate
     */
    public Date getEnddate() {
        return (Date)getAttributeInternal(ENDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Enddate.
     * @param value value to set the Enddate
     */
    public void setEnddate(Date value) {
        setAttributeInternal(ENDDATE, value);
    }

    /**
     * Gets the attribute value for DelegateStatus, using the alias name DelegateStatus.
     * @return the DelegateStatus
     */
    public String getDelegateStatus() {
        return (String)getAttributeInternal(DELEGATESTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for DelegateStatus.
     * @param value value to set the DelegateStatus
     */
    public void setDelegateStatus(String value) {
        setAttributeInternal(DELEGATESTATUS, value);
    }

    /**
     * Gets the attribute value for Status, using the alias name Status.
     * @return the Status
     */
    public String getStatus() {
        return (String)getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Status.
     * @param value value to set the Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[] { id });
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }

    public Number getSeqValue(String sequenceName) {
        Number seqNumber = new Number(0);
        if (sequenceName != null && !sequenceName.equals("")) {
            SequenceImpl seqImpl =
                new SequenceImpl(sequenceName, getDBTransaction());
            seqNumber = seqImpl.getSequenceNumber();
        }
        return seqNumber;
    }

    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        setId(getSeqValue("PHE_DSWF_PARTICIPANT_SEQ"));
    }
}
