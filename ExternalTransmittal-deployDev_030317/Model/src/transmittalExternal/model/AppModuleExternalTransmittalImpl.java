package transmittalExternal.model;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.context.FacesContext;

import javax.servlet.http.HttpServletRequest;

import oracle.adf.model.AttributeBinding;
import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCBindingContainer;
import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.view.rich.context.AdfFacesContext;

import oracle.binding.BindingContainer;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import transmittalExternal.model.common.AppModuleExternalTransmittal;

import transmittalExternal.vo.CoverNoteInfoVOImpl;
import transmittalExternal.vo.DetailExternalHistoryImpl;
import transmittalExternal.vo.DetailExternalReferenceImpl;
import transmittalExternal.vo.DetailExternalSubmittalDocImpl;
import transmittalExternal.vo.DetailExternalSupportingDocImpl;
import transmittalExternal.vo.DetailInteralSupportingDocForUserImpl;
import transmittalExternal.vo.DetailInternalSupportinDocVOImpl;
import transmittalExternal.vo.DetailInternalSupportingDocForDelegateImpl;
import transmittalExternal.vo.IsUserFinishedImpl;
import transmittalExternal.vo.PheDelegateViewImpl;
import transmittalExternal.vo.PheDswfDocSubmittalVOImpl;
import transmittalExternal.vo.TdcDetailExternalImpl;
import transmittalExternal.vo.TransmittalReceiverListVOImpl;
import transmittalExternal.vo.UserRoleinTransmittalVOImpl;
import transmittalExternal.vo.ValidateDetailSupportingDocVoImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 04 09:19:29 ICT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleExternalTransmittalImpl extends ApplicationModuleImpl implements AppModuleExternalTransmittal {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleExternalTransmittalImpl() {
    }

    /**
     * Container's getter for contractNumberVO1.
     * @return contractNumberVO1
     */
    public ViewObjectImpl getcontractNumberVO1() {
        return (ViewObjectImpl)findViewObject("contractNumberVO1");
    }

    /**
     * Container's getter for ParentMenuVO1.
     * @return ParentMenuVO1
     */
    public ViewObjectImpl getParentMenuVO1() {
        return (ViewObjectImpl)findViewObject("ParentMenuVO1");
    }

    /**
     * Container's getter for ChildMenuVO1.
     * @return ChildMenuVO1
     */
    public ViewObjectImpl getChildMenuVO1() {
        return (ViewObjectImpl)findViewObject("ChildMenuVO1");
    }

    /**
     * Container's getter for ChildMenuVO2.
     * @return ChildMenuVO2
     */
    public ViewObjectImpl getChildMenuVO2() {
        return (ViewObjectImpl)findViewObject("ChildMenuVO2");
    }

    /**
     * Container's getter for ExternalUserVO1.
     * @return ExternalUserVO1
     */
    public ViewObjectImpl getExternalUserVO1() {
        return (ViewObjectImpl)findViewObject("ExternalUserVO1");
    }

    /**
     * Container's getter for ListDocumentStatusVO1.
     * @return ListDocumentStatusVO1
     */
    public ViewObjectImpl getListDocumentStatusVO1() {
        return (ViewObjectImpl)findViewObject("ListDocumentStatusVO1");
    }

    /**
     * Container's getter for ListSentHardcopyVO1.
     * @return ListSentHardcopyVO1
     */
    public ViewObjectImpl getListSentHardcopyVO1() {
        return (ViewObjectImpl)findViewObject("ListSentHardcopyVO1");
    }

    /**
     * Container's getter for PheDswfMasterVO1.
     * @return PheDswfMasterVO1
     */
    public ViewObjectImpl getPheDswfMasterVO1() {
        return (ViewObjectImpl)findViewObject("PheDswfMasterVO1");
    }

    /**
     * Container's getter for LatestTransmittalNoVo1.
     * @return LatestTransmittalNoVo1
     */
    public ViewObjectImpl getLatestTransmittalNoVo1() {
        return (ViewObjectImpl)findViewObject("LatestTransmittalNoVo1");
    }

    /**
     * Container's getter for PheDswfPaticipantVO1.
     * @return PheDswfPaticipantVO1
     */
    public ViewObjectImpl getPheDswfPaticipantVO1() {
        return (ViewObjectImpl)findViewObject("PheDswfPaticipantVO1");
    }

    /**
     * Container's getter for PhdDswfDocVo1.
     * @return PhdDswfDocVo1
     */
    public ViewObjectImpl getPhdDswfDocVo1() {
        return (ViewObjectImpl)findViewObject("PhdDswfDocVo1");
    }

    /**
     * Container's getter for ParentChildViewLink1.
     * @return ParentChildViewLink1
     */
    public ViewLinkImpl getParentChildViewLink1() {
        return (ViewLinkImpl)findViewLink("ParentChildViewLink1");
    }

    /**
     * Container's getter for ChildChildViewLink1.
     * @return ChildChildViewLink1
     */
    public ViewLinkImpl getChildChildViewLink1() {
        return (ViewLinkImpl)findViewLink("ChildChildViewLink1");
    }

    public Number getSeqValue(String sequenceName) {
        Number seqNumber = new Number(0);
        if (sequenceName != null && !sequenceName.equals("")) {
            SequenceImpl seqImpl =
                new SequenceImpl(sequenceName, getDBTransaction());
            seqNumber = seqImpl.getSequenceNumber();
        }
        return seqNumber;
    }

    /**
     * Container's getter for PheDswfLog1.
     * @return PheDswfLog1
     */
    public ViewObjectImpl getPheDswfLog1() {
        return (ViewObjectImpl)findViewObject("PheDswfLog1");
    }

    /**
     * Container's getter for ExternalUserOrganizationVo1.
     * @return ExternalUserOrganizationVo1
     */
    public ViewObjectImpl getExternalUserOrganizationVo1() {
        return (ViewObjectImpl)findViewObject("ExternalUserOrganizationVo1");
    }

    /**
     * Container's getter for contractNumberOrganizationVO1.
     * @return contractNumberOrganizationVO1
     */
    public ViewObjectImpl getcontractNumberOrganizationVO1() {
        return (ViewObjectImpl)findViewObject("contractNumberOrganizationVO1");
    }

    /**
     * Container's getter for ViewInternalRoleVO1.
     * @return ViewInternalRoleVO1
     */
    public ViewObjectImpl getViewInternalRoleVO1() {
        return (ViewObjectImpl)findViewObject("ViewInternalRoleVO1");
    }

    /**
     * Container's getter for UsersInternalVO1.
     * @return UsersInternalVO1
     */
    public ViewObjectImpl getUsersInternalVO1() {
        return (ViewObjectImpl)findViewObject("UsersInternalVO1");
    }

    /**
     * Container's getter for TdcDetailExternal1.
     * @return TdcDetailExternal1
     */
    public ViewObjectImpl getTdcDetailExternal1() {
        return (ViewObjectImpl)findViewObject("TdcDetailExternal1");
    }

    public String getTransmittalType() {
        return "";
    }

    /**
     * Container's getter for DetailExternalSupportingDoc1.
     * @return DetailExternalSupportingDoc1
     */
    public ViewObjectImpl getDetailExternalSupportingDoc1() {
        return (ViewObjectImpl)findViewObject("DetailExternalSupportingDoc1");
    }

    /**
     * Container's getter for DetailExternalSubmittalDoc1.
     * @return DetailExternalSubmittalDoc1
     */
    public ViewObjectImpl getDetailExternalSubmittalDoc1() {
        return (ViewObjectImpl)findViewObject("DetailExternalSubmittalDoc1");
    }

    /**
     * Container's getter for IsDocExistVO1.
     * @return IsDocExistVO1
     */
    public ViewObjectImpl getIsDocExistVO1() {
        return (ViewObjectImpl)findViewObject("IsDocExistVO1");
    }

    /**
     * Container's getter for TransmittalReceiverListVO1.
     * @return TransmittalReceiverListVO1
     */
    public TransmittalReceiverListVOImpl getTransmittalReceiverListVO1() {
        return (TransmittalReceiverListVOImpl)findViewObject("TransmittalReceiverListVO1");
    }


    /**
     * Container's getter for PheDocProcessVO1.
     * @return PheDocProcessVO1
     */
    public ViewObjectImpl getPheDocProcessVO1() {
        return (ViewObjectImpl)findViewObject("PheDocProcessVO1");
    }

    /**
     * Container's getter for CoverNoteInfoVO1.
     * @return CoverNoteInfoVO1
     */
    public CoverNoteInfoVOImpl getCoverNoteInfoVO1() {
        return (CoverNoteInfoVOImpl)findViewObject("CoverNoteInfoVO1");
    }

    /**
     * Container's getter for DetailExternalHistory1.
     * @return DetailExternalHistory1
     */
    public DetailExternalHistoryImpl getDetailExternalHistory1() {
        return (DetailExternalHistoryImpl)findViewObject("DetailExternalHistory1");
    }

    /**
     * Container's getter for DetailExternalReference1.
     * @return DetailExternalReference1
     */
    public DetailExternalReferenceImpl getDetailExternalReference1() {
        return (DetailExternalReferenceImpl)findViewObject("DetailExternalReference1");
    }

    /**
     * Container's getter for GetConfigVO1.
     * @return GetConfigVO1
     */
    public ViewObjectImpl getGetConfigVO1() {
        return (ViewObjectImpl)findViewObject("GetConfigVO1");
    }

    /**
     * Container's getter for HistoryDocNumber1.
     * @return HistoryDocNumber1
     */
    public ViewObjectImpl getHistoryDocNumber1() {
        return (ViewObjectImpl)findViewObject("HistoryDocNumber1");
    }
    
    public void ExecDetailSubmittalByUploader()
    {
        DCBindingContainer bindings = (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcReceiver = bindings.findIteratorBinding("TransmittalReceiverListVO1Iterator");
        String receiver = dcReceiver.getRowAtRangeIndex(0).getAttribute("Receiver")==null?"":dcReceiver.getRowAtRangeIndex(0).getAttribute("Receiver").toString();
        
        ViewObject vo = this.findViewObject("DetailExternalSubmittalDoc1");
        vo.executeQuery();
        while(vo.hasNext()){
            Row row = vo.next();
            System.out.println(row.getAttribute("DocTitle")+" "+row.getAttribute("Uploader"));
        }
        
        vo.setWhereClause("Uploader = '" + receiver + "'");
        vo.executeQuery();
        
//        dcReceiver.setCurrentRowIndexInRange(0);
    }
    
    public void ExecDetailSupportingInternalByUploader()
    {
        DCBindingContainer bindings = (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcReceiver = bindings.findIteratorBinding("TransmittalReceiverListVO1Iterator");
        String receiver = dcReceiver.getRowAtRangeIndex(0).getAttribute("Receiver")==null?"":dcReceiver.getRowAtRangeIndex(0).getAttribute("Receiver").toString();
        
        ViewObject vo = this.findViewObject("DetailInternalSupportinDocVO1");
        vo.executeQuery();        
//        while(vo.hasNext()){
//            Row row = vo.next();
//            System.out.println(row.getAttribute("DocTitle")+" "+row.getAttribute("Receiver"));
//        }
        
        vo.setWhereClause("RECEIVER = '" + receiver + "'");
        vo.executeQuery();
//        dcReceiver.setCurrentRowIndexInRange(0);
    }
    
    public Object resolveExpression(String el) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory =  facesContext.getApplication().getExpressionFactory();        
        ValueExpression valueExp = expressionFactory.createValueExpression(elContext,el,Object.class);
        return valueExp.getValue(elContext);
    }
    
    public BindingContainer getBindings() {
    return BindingContext.getCurrent().getCurrentBindingsEntry();
    }

    /**
     * Container's getter for UserRoleinTransmittalVO1.
     * @return UserRoleinTransmittalVO1
     */
    public UserRoleinTransmittalVOImpl getUserRoleinTransmittalVO1() {
        return (UserRoleinTransmittalVOImpl)findViewObject("UserRoleinTransmittalVO1");
    }

    /**
     * Container's getter for UserActionChoice1.
     * @return UserActionChoice1
     */
    public ViewObjectImpl getUserActionChoice1() {
        return (ViewObjectImpl)findViewObject("UserActionChoice1");
    }

    /**
     * Container's getter for PheDswfParticipantVO1_1.
     * @return PheDswfParticipantVO1_1
     */
    public ViewObjectImpl getPheDswfParticipantVO1_1() {
        return (ViewObjectImpl)findViewObject("PheDswfParticipantVO1_1");
    }

    /**
     * Container's getter for IsUserFinished1.
     * @return IsUserFinished1
     */
    public IsUserFinishedImpl getIsUserFinished1() {
        return (IsUserFinishedImpl)findViewObject("IsUserFinished1");
    }

    /**
     * Container's getter for PheDswfDocSubmittalVO1.
     * @return PheDswfDocSubmittalVO1
     */
    public PheDswfDocSubmittalVOImpl getPheDswfDocSubmittalVO1() {
        return (PheDswfDocSubmittalVOImpl)findViewObject("PheDswfDocSubmittalVO1");
    }

    /**
     * Container's getter for DetailInternalSupportinDocVO1.
     * @return DetailInternalSupportinDocVO1
     */
    public DetailInternalSupportinDocVOImpl getDetailInternalSupportinDocVO1() {
        return (DetailInternalSupportinDocVOImpl)findViewObject("DetailInternalSupportinDocVO1");
    }

    /**
     * Container's getter for LoadInternalSubmittalDocProcessVO1.
     * @return LoadInternalSubmittalDocProcessVO1
     */
    public ViewObjectImpl getLoadInternalSubmittalDocProcessVO1() {
        return (ViewObjectImpl)findViewObject("LoadInternalSubmittalDocProcessVO1");
    }

    /**
     * Container's getter for DetailInteralSupportingDocForUser1.
     * @return DetailInteralSupportingDocForUser1
     */
    public DetailInteralSupportingDocForUserImpl getDetailInteralSupportingDocForUser1() {
        return (DetailInteralSupportingDocForUserImpl)findViewObject("DetailInteralSupportingDocForUser1");
    }

    /**
     * Container's getter for GetEmailVO1.
     * @return GetEmailVO1
     */
    public ViewObjectImpl getGetEmailVO1() {
        return (ViewObjectImpl)findViewObject("GetEmailVO1");
    }

    /**
     * Container's getter for ForwardSelectionVo1.
     * @return ForwardSelectionVo1
     */
    public ViewObjectImpl getForwardSelectionVo1() {
        return (ViewObjectImpl)findViewObject("ForwardSelectionVo1");
    }

    /**
     * Container's getter for GetFolderByTransmittalIdVO1.
     * @return GetFolderByTransmittalIdVO1
     */
    public ViewObjectImpl getGetFolderByTransmittalIdVO1() {
        return (ViewObjectImpl)findViewObject("GetFolderByTransmittalIdVO1");
    }

    /**
     * Container's getter for GetOrgIdVO1.
     * @return GetOrgIdVO1
     */
    public ViewObjectImpl getGetOrgIdVO1() {
        return (ViewObjectImpl)findViewObject("GetOrgIdVO1");
    }

    /**
     * Container's getter for GetProjectIdVO1.
     * @return GetProjectIdVO1
     */
    public ViewObjectImpl getGetProjectIdVO1() {
        return (ViewObjectImpl)findViewObject("GetProjectIdVO1");
    }

    /**
     * Container's getter for UserSecurityAttributesVO1.
     * @return UserSecurityAttributesVO1
     */
    public ViewObjectImpl getUserSecurityAttributesVO1() {
        return (ViewObjectImpl)findViewObject("UserSecurityAttributesVO1");
    }

    /**
     * Container's getter for AutoSuggestInternalUserVO1.
     * @return AutoSuggestInternalUserVO1
     */
    public ViewObjectImpl getAutoSuggestInternalUserVO1() {
        return (ViewObjectImpl)findViewObject("AutoSuggestInternalUserVO1");
    }

    /**
     * Container's getter for UpdatePublishStatusDoc1.
     * @return UpdatePublishStatusDoc1
     */
    public ViewObjectImpl getUpdatePublishStatusDoc1() {
        return (ViewObjectImpl)findViewObject("UpdatePublishStatusDoc1");
    }

    /**
     * Container's getter for DocPublishing1.
     * @return DocPublishing1
     */
    public ViewObjectImpl getDocPublishing1() {
        return (ViewObjectImpl)findViewObject("DocPublishing1");
    }

    /**
     * Container's getter for contractNumberPublish1.
     * @return contractNumberPublish1
     */
    public ViewObjectImpl getcontractNumberPublish1() {
        return (ViewObjectImpl)findViewObject("contractNumberPublish1");
    }

    /**
     * Container's getter for ExternalUserPublishVO1.
     * @return ExternalUserPublishVO1
     */
    public ViewObjectImpl getExternalUserPublishVO1() {
        return (ViewObjectImpl)findViewObject("ExternalUserPublishVO1");
    }

    /**
     * Container's getter for PheDelegateView1.
     * @return PheDelegateView1
     */
    public ViewObjectImpl getPheDelegateView1() {
        return (ViewObjectImpl)findViewObject("PheDelegateView1");
    }

    /**
     * Container's getter for DetailInternalSupportingDocForDelegate1.
     * @return DetailInternalSupportingDocForDelegate1
     */
    public DetailInternalSupportingDocForDelegateImpl getDetailInternalSupportingDocForDelegate1() {
        return (DetailInternalSupportingDocForDelegateImpl)findViewObject("DetailInternalSupportingDocForDelegate1");
    }

    /**
     * Container's getter for IsDelegateVO1.
     * @return IsDelegateVO1
     */
    public ViewObjectImpl getIsDelegateVO1() {
        return (ViewObjectImpl)findViewObject("IsDelegateVO1");
    }

    /**
     * Container's getter for PheDelegateDavidVO1.
     * @return PheDelegateDavidVO1
     */
    public ViewObjectImpl getPheDelegateDavidVO1() {
        return (ViewObjectImpl)findViewObject("PheDelegateDavidVO1");
    }

    /**
     * Container's getter for IsRoleExist1.
     * @return IsRoleExist1
     */
    public ViewObjectImpl getIsRoleExist1() {
        return (ViewObjectImpl)findViewObject("IsRoleExist1");
    }

    /**
     * Container's getter for GetFullnameDelegateTo1.
     * @return GetFullnameDelegateTo1
     */
    public ViewObjectImpl getGetFullnameDelegateTo1() {
        return (ViewObjectImpl)findViewObject("GetFullnameDelegateTo1");
    }

    /**
     * Container's getter for GetAllRecepientEmailByTransmittalIDVO1.
     * @return GetAllRecepientEmailByTransmittalIDVO1
     */
    public ViewObjectImpl getGetAllRecepientEmailByTransmittalIDVO1() {
        return (ViewObjectImpl)findViewObject("GetAllRecepientEmailByTransmittalIDVO1");
    }

    /**
     * Container's getter for usersDcrmsVO1.
     * @return usersDcrmsVO1
     */
    public ViewObjectImpl getusersDcrmsVO1() {
        return (ViewObjectImpl)findViewObject("usersDcrmsVO1");
    }

    /**
     * Container's getter for ValidateDetailSupportingDocVo1.
     * @return ValidateDetailSupportingDocVo1
     */
    public ViewObjectImpl getValidateDetailSupportingDocVo1() {
        return (ViewObjectImpl)findViewObject("ValidateDetailSupportingDocVo1");
    }


    public class TransmittalStatus
    {
        private String Finish = "Finished";
        private String Abort = "Aborted";
        private String Reject = "Rejected";
    }
    
    private TransmittalStatus StatusList = new TransmittalStatus();
    
    public boolean UpdateStatusDSWFMaster(String transmittalStatus)
    {
    try{
        ViewObjectImpl myVO = this.getPheDswfMasterVO1();
        AttributeBinding abTransmittalNo = (AttributeBinding)getBindings().get("TransmittalId");
        AttributeBinding abFinishReason = (AttributeBinding)getBindings().get("FinishReason");
        AttributeBinding abRejectReason = (AttributeBinding)getBindings().get("RejectReason");
        AttributeBinding abAbortedReason = (AttributeBinding)getBindings().get("AbortedReason");
        Key keys = new Key(new Object[] { abTransmittalNo.getInputValue() });
        Row row = myVO.getRow(keys);
        row.setAttribute("TransmittalStatus", transmittalStatus);
    
        if(transmittalStatus.trim().equalsIgnoreCase(StatusList.Finish))
            row.setAttribute("FinishReason", abFinishReason.getInputValue());
        if(transmittalStatus.trim().equalsIgnoreCase(StatusList.Abort))
            row.setAttribute("AbortedReason", abAbortedReason.getInputValue());
        if(transmittalStatus.trim().equalsIgnoreCase(StatusList.Reject))
            row.setAttribute("RejectReason", abRejectReason.getInputValue());
        this.getDBTransaction().commit();
        return true;
        }
    catch(Exception ex)
    {
        this.getDBTransaction().rollback();
        System.out.println("err Update DSWF : " + ex.getMessage());
        return false;
    }
    }
    
    
    public void SetLoadTransmittalId(){
        HttpServletRequest request = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();
        String transmittalId=request.getParameter("transmittalId");//"PHEONWJ-ID-20161020-0001";//
        String dUser=request.getParameter("dUser");//"user_hsse";//
        String isTdc=request.getParameter("isTdc");//
        AdfFacesContext.getCurrentInstance().getPageFlowScope().put("transmittalId", transmittalId);
        if(dUser != null){
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("dUser", dUser);
        }
        if(isTdc != null){
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("isTdc", isTdc);     
        }
       
    }
}
