package transmittalExternal.model;

import java.math.BigDecimal;

import java.sql.Date;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 13 02:15:43 ICT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PheDelegateImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(PheDelegateImpl obj) {
                return obj.getId();
            }

            public void put(PheDelegateImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        TransmittalId {
            public Object get(PheDelegateImpl obj) {
                return obj.getTransmittalId();
            }

            public void put(PheDelegateImpl obj, Object value) {
                obj.setTransmittalId((String)value);
            }
        }
        ,
        DelegateFrom {
            public Object get(PheDelegateImpl obj) {
                return obj.getDelegateFrom();
            }

            public void put(PheDelegateImpl obj, Object value) {
                obj.setDelegateFrom((String)value);
            }
        }
        ,
        DelegateTo {
            public Object get(PheDelegateImpl obj) {
                return obj.getDelegateTo();
            }

            public void put(PheDelegateImpl obj, Object value) {
                obj.setDelegateTo((String)value);
            }
        }
        ,
        StartDate {
            public Object get(PheDelegateImpl obj) {
                return obj.getStartDate();
            }

            public void put(PheDelegateImpl obj, Object value) {
                obj.setStartDate((Date)value);
            }
        }
        ,
        EndDate {
            public Object get(PheDelegateImpl obj) {
                return obj.getEndDate();
            }

            public void put(PheDelegateImpl obj, Object value) {
                obj.setEndDate((oracle.jbo.domain.Date)value);
            }
        }
        ,
        StatusCode {
            public Object get(PheDelegateImpl obj) {
                return obj.getStatusCode();
            }

            public void put(PheDelegateImpl obj, Object value) {
                obj.setStatusCode((String)value);
            }
        }
        ,
        StatusDesc {
            public Object get(PheDelegateImpl obj) {
                return obj.getStatusDesc();
            }

            public void put(PheDelegateImpl obj, Object value) {
                obj.setStatusDesc((String)value);
            }
        }
        ,
        DelegatePid {
            public Object get(PheDelegateImpl obj) {
                return obj.getDelegatePid();
            }

            public void put(PheDelegateImpl obj, Object value) {
                obj.setDelegatePid((BigDecimal)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(PheDelegateImpl object);

        public abstract void put(PheDelegateImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int TRANSMITTALID = AttributesEnum.TransmittalId.index();
    public static final int DELEGATEFROM = AttributesEnum.DelegateFrom.index();
    public static final int DELEGATETO = AttributesEnum.DelegateTo.index();
    public static final int STARTDATE = AttributesEnum.StartDate.index();
    public static final int ENDDATE = AttributesEnum.EndDate.index();
    public static final int STATUSCODE = AttributesEnum.StatusCode.index();
    public static final int STATUSDESC = AttributesEnum.StatusDesc.index();
    public static final int DELEGATEPID = AttributesEnum.DelegatePid.index();

    /**
     * This is the default constructor (do not remove).
     */
    public PheDelegateImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("transmittalExternal.model.PheDelegate");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for TransmittalId, using the alias name TransmittalId.
     * @return the TransmittalId
     */
    public String getTransmittalId() {
        return (String)getAttributeInternal(TRANSMITTALID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TransmittalId.
     * @param value value to set the TransmittalId
     */
    public void setTransmittalId(String value) {
        setAttributeInternal(TRANSMITTALID, value);
    }

    /**
     * Gets the attribute value for DelegateFrom, using the alias name DelegateFrom.
     * @return the DelegateFrom
     */
    public String getDelegateFrom() {
        return (String)getAttributeInternal(DELEGATEFROM);
    }

    /**
     * Sets <code>value</code> as the attribute value for DelegateFrom.
     * @param value value to set the DelegateFrom
     */
    public void setDelegateFrom(String value) {
        setAttributeInternal(DELEGATEFROM, value);
    }

    /**
     * Gets the attribute value for DelegateTo, using the alias name DelegateTo.
     * @return the DelegateTo
     */
    public String getDelegateTo() {
        return (String)getAttributeInternal(DELEGATETO);
    }

    /**
     * Sets <code>value</code> as the attribute value for DelegateTo.
     * @param value value to set the DelegateTo
     */
    public void setDelegateTo(String value) {
        setAttributeInternal(DELEGATETO, value);
    }

    /**
     * Gets the attribute value for StartDate, using the alias name StartDate.
     * @return the StartDate
     */
    public Date getStartDate() {
        return (Date)getAttributeInternal(STARTDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StartDate.
     * @param value value to set the StartDate
     */
    public void setStartDate(Date value) {
        setAttributeInternal(STARTDATE, value);
    }

    /**
     * Gets the attribute value for EndDate, using the alias name EndDate.
     * @return the EndDate
     */
    public oracle.jbo.domain.Date getEndDate() {
        return (oracle.jbo.domain.Date)getAttributeInternal(ENDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EndDate.
     * @param value value to set the EndDate
     */
    public void setEndDate(oracle.jbo.domain.Date value) {
        setAttributeInternal(ENDDATE, value);
    }

    /**
     * Gets the attribute value for StatusCode, using the alias name StatusCode.
     * @return the StatusCode
     */
    public String getStatusCode() {
        return (String)getAttributeInternal(STATUSCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StatusCode.
     * @param value value to set the StatusCode
     */
    public void setStatusCode(String value) {
        setAttributeInternal(STATUSCODE, value);
    }

    /**
     * Gets the attribute value for StatusDesc, using the alias name StatusDesc.
     * @return the StatusDesc
     */
    public String getStatusDesc() {
        return (String)getAttributeInternal(STATUSDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for StatusDesc.
     * @param value value to set the StatusDesc
     */
    public void setStatusDesc(String value) {
        setAttributeInternal(STATUSDESC, value);
    }

    /**
     * Gets the attribute value for DelegatePid, using the alias name DelegatePid.
     * @return the DelegatePid
     */
    public BigDecimal getDelegatePid() {
        return (BigDecimal)getAttributeInternal(DELEGATEPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DelegatePid.
     * @param value value to set the DelegatePid
     */
    public void setDelegatePid(BigDecimal value) {
        setAttributeInternal(DELEGATEPID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
    
    public Number getSeqValue(String sequenceName) {
        Number seqNumber = new Number(0);
        if (sequenceName != null && !sequenceName.equals("")) {
            SequenceImpl seqImpl =
                new SequenceImpl(sequenceName, getDBTransaction());
            seqNumber = seqImpl.getSequenceNumber();
        }
        return seqNumber;
    }

    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        setId(getSeqValue("PHE_DELEGATE_SEQ"));
    }
}
